#!/system/bin/sh

# Combined library with functions to both apply optimizations and restore parameters.

# Force all CPUs to be online
function forceOnlineCPUs() {
    local i st en
    IFS="-" read st en <"/sys/devices/system/cpu/present"
    if [ -n "$st" -a -n "$en" -a "$st" -ge 0 -a "$en" -ge 0 ]; then
        for i in `seq $st $en`; do
            if [ -e "/sys/devices/system/cpu/cpu$i/online" ]; then
                chmod 644 "/sys/devices/system/cpu/cpu$i/online"
                echo '1' > "/sys/devices/system/cpu/cpu$i/online"
            fi
        done
    fi
}

# Function to restore default CPU online state (hotplugging)
function restoreDefaultCPUs() {
    local i st en
    IFS="-" read st en <"/sys/devices/system/cpu/present"
    if [ -n "$st" -a -n "$en" -a "$st" -ge 0 -a "$en" -ge 0 ]; then
        for i in `seq $st $en`; do
            if [ -e "/sys/devices/system/cpu/cpu$i/online" ]; then
                echo '0' > "/sys/devices/system/cpu/cpu$i/online"
            fi
        done
    fi
}

# Set SELinux to permissive (reduce SELinux jitter)
function reduceSelinuxJitter() {
    if [ $1 -gt 0 ]; then
        setenforce 0
    elif [ $1 -lt 0 ]; then
        setenforce 1
    fi
}

# Restore default SELinux settings
function restoreSelinux() {
    setenforce 1
}

# Function to reduce thermal throttling (disabling thermal services)
function reduceThermalJitter() {
    if [ $1 -gt 0 ]; then
        if [ -w "/sys/module/msm_thermal/core_control/enabled" ]; then
            echo '0' > "/sys/module/msm_thermal/core_control/enabled"
        fi
        setprop ctl.stop thermal-engine
        setprop ctl.stop vendor.thermal-engine
    elif [ $1 -lt 0 ]; then
        if [ -w "/sys/module/msm_thermal/core_control/enabled" ]; then
            echo '1' > "/sys/module/msm_thermal/core_control/enabled"
        fi
        setprop ctl.start thermal-engine
        setprop ctl.start vendor.thermal-engine
    fi
}

# Restore thermal throttling to the default state
function restoreThermal() {
    if [ -w "/sys/module/msm_thermal/core_control/enabled" ]; then
        echo '1' > "/sys/module/msm_thermal/core_control/enabled"
    fi
    setprop ctl.start thermal-engine
    setprop ctl.start vendor.thermal-engine
}

# Reduce governor jitter by setting CPU governor to performance
function reduceGovernorJitter() {
    local i st en gov
    gov="performance"
    IFS="-" read st en <"/sys/devices/system/cpu/present"
    if [ -n "$st" -a -n "$en" -a "$st" -ge 0 -a "$en" -ge 0 ]; then
        for i in `seq $st $en`; do
            if [ -e "/sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor" ]; then
                echo "$gov" > "/sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor"
            fi
        done
    fi
}

# Restore CPU governor to default
function restoreGovernor() {
    local i st en gov
    gov="ondemand"
    IFS="-" read st en <"/sys/devices/system/cpu/present"
    if [ -n "$st" -a -n "$en" -a "$st" -ge 0 -a "$en" -ge 0 ]; then
        for i in `seq $st $en`; do
            if [ -e "/sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor" ]; then
                echo "$gov" > "/sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor"
            fi
        done
    fi
}

# Reduce logd jitter by stopping logd services
function reduceLogdJitter() {
    if [ $1 -gt 0 ]; then
        setprop ctl.stop logd
    elif [ $1 -lt 0 ]; then
        setprop ctl.start logd
    fi
}

# Restore logd services to default state
function restoreLogd() {
    setprop ctl.start logd
}

# Reduce I/O jitter by setting the I/O scheduler to noop
function reduceIoJitter() {
    local device
    for device in /sys/block/*/queue/scheduler; do
        if [ -e "$device" ]; then
            echo 'noop' > "$device"
        fi
    done
}

# Restore I/O scheduler to default
function restoreIoScheduler() {
    local device
    for device in /sys/block/*/queue/scheduler; do
        if [ -e "$device" ]; then
            echo 'cfq' > "$device"
        fi
    done
}

# Reduce VM jitter by adjusting swappiness and other parameters
function reduceVmJitter() {
    if [ $1 -gt 0 ]; then
        echo '0' > /proc/sys/vm/swappiness
        echo '100' > /proc/sys/vm/dirty_ratio
        echo '1' > /proc/sys/vm/laptop_mode
    elif [ $1 -lt 0 ]; then
        echo '60' > /proc/sys/vm/swappiness
        echo '20' > /proc/sys/vm/dirty_ratio
        echo '0' > /proc/sys/vm/laptop_mode
    fi
}

# Restore VM settings to default
function restoreVm() {
    echo '60' > /proc/sys/vm/swappiness
    echo '20' > /proc/sys/vm/dirty_ratio
    echo '0' > /proc/sys/vm/laptop_mode
}

# Function to reduce Wi-Fi jitter
function reduceWifiJitter() {
    if [ $1 -gt 0 ]; then
        settings put global wifi_suspend_optimizations_enabled 0
    elif [ $1 -lt 0 ]; then
        settings delete global wifi_suspend_optimizations_enabled
    fi
}

# Restore Wi-Fi settings to default
function restoreWifi() {
    settings delete global wifi_suspend_optimizations_enabled
}

# Function to reduce battery jitter
function reduceBatteryJitter() {
    if [ $1 -gt 0 ]; then
        settings put global adaptive_battery_management_enabled 0
    elif [ $1 -lt 0 ]; then
        settings delete global adaptive_battery_management_enabled
    fi
}

# Restore battery settings to default
function restoreBattery() {
    settings delete global adaptive_battery_management_enabled
}

# Reduce effects jitter by disabling audio effects
function reduceEffectJitter() {
    if [ $1 -gt 0 ]; then
        resetprop ro.audio.ignore_effects true
    elif [ $1 -lt 0 ]; then
        resetprop ro.audio.ignore_effects false
    fi
}

# Restore audio effects settings
function restoreEffects() {
    resetprop ro.audio.ignore_effects false
}

# Wrapper function to apply all optimizations
function applyAllOptimizations() {
    reduceSelinuxJitter 1
    reduceThermalJitter 1
    reduceGovernorJitter 1
    reduceLogdJitter 1
    reduceIoJitter 1
    reduceVmJitter 1
    reduceWifiJitter 1
    reduceBatteryJitter 1
    reduceEffectJitter 1
}

# Wrapper function to restore all settings to default
function restoreAllSettings() {
    restoreSelinux
    restoreThermal
    restoreGovernor
    restoreLogd
    restoreIoScheduler
    restoreVm
    restoreWifi
    restoreBattery
    restoreEffects
}

# Usage examples
# applyAllOptimizations  # Apply all optimizations
# restoreAllSettings     # Restore all settings to default state
