#!/system/bin/sh
#
# Combined and compatible functions from Zyhk's script

MYDIR=${0%/*}

# Forcing to reload audioservers
function reloadAudioServers() {
    local i pid
    for i in $(seq 1 3); do
        if [ "$(getprop sys.boot_completed)" = "1" ] && [ -n "$(getprop init.svc.audioserver)" ]; then
            break
        fi
        sleep 1
    done

    if [ -n "$(getprop init.svc.audioserver)" ]; then
        setprop ctl.restart audioserver
        sleep 0.2

        if [ "$(getprop init.svc.audioserver)" != "running" ]; then
            pid=$(getprop init.svc_debug_pid.audioserver)
            if [ -n "$pid" ]; then
                kill -HUP "$pid" > /dev/null 2>&1
            fi
            for i in $(seq 1 10); do
                sleep 0.2
                if [ "$(getprop init.svc.audioserver)" = "running" ]; then
                    break
                elif [ "$i" -eq 10 ]; then
                    echo "audioserver reload failed!" 1>&2
                    return 1
                fi
            done
        fi

        if [ $# -gt 0 ] && [ "$1" = "all" ] && [ -n "$(getprop init.svc.vendor.audio-hal)" ]; then
            setprop ctl.restart vendor.audio-hal > /dev/null 2>&1
            sleep 0.2
            if [ "$(getprop init.svc.vendor.audio-hal)" != "running" ]; then
                kill "$(getprop init.svc_debug_pid.vendor.audio-hal)" > /dev/null 2>&1
            fi
        fi
    else
        echo "audioserver is not found!" 1>&2
        return 1
    fi
}

# Find mount points paired with a specific path
function findMounts() {
    if [ $# -ne 3 ]; then
        return 1
    elif [ ! -r "$1" ] || [ "$(expr "$2" : /data)" -ne 5 ]; then
        return 1
    fi

    local mf=${2:5} showKey=0
    case "$3" in
        "true" | "1") showKey=1 ;;
        "false" | "0") showKey=0 ;;
    esac

    awk -v showKey="$showKey" -v mFile="^$mf\$|^$mf//deleted$" '
        BEGIN { status=1 }
        $4 ~ mFile && $10 ~ /^\/dev\/block\// {
            if (showKey) print $4, $5
            else print $5
            status=0
        }
        END { exit status }' < "$1"
}

# Check if a specific mount point exists
function isMounted() {
    if [ $# -ne 4 ]; then
        return 1
    elif [ ! -r "$1" ]; then
        return 1
    fi

    local mf="$2" includeMagisk=0 showKey=0
    [ "$3" = "IncludeMagisk" ] && includeMagisk=1
    [ "$4" = "ShowKey" ] && showKey=1

    awk -v showKey="$showKey" -v includeMagisk="$includeMagisk" -v mFile="^$mf\$" '
        BEGIN { status=1 }
        $5 ~ mFile && (includeMagisk || ($4 !~ /^\/adb\/modules\// && $4 !~ /^\/data\/adb\/modules\// && $10 ~ /^\/dev\/block\//)) {
            if (showKey) print $4, $5
            status=0
            exit
        }
        END { exit status }' < "$1"
}

# Remove mount points associated with a path
function removeMountPoints() {
    if [ $# -eq 1 ]; then
        local mDirs i
        mDirs=$(findMounts "/proc/self/mountinfo" "$1" 0)
        if [ -n "$mDirs" ]; then
            for i in $mDirs; do
                if [ -e "$i" ]; then
                    case "$i" in
                        /data/local/tmp/*) ;;
                        *) umount "$i" > /dev/null 2>&1 ;;
                    esac
                fi
            done
        fi
    fi
    return 0
}

# Remove a generated file and its associated mount points
function removeGenFile() {
    if [ $# -eq 1 ]; then
        removeMountPoints "$1"
        if [ -e "$1" ]; then
            rm -f "$1"
        fi
    fi
    return 0
}
